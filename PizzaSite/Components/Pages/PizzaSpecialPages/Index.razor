@page "/pizzaspecials"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using PizzaSite.Model
@using PizzaSite.Data
@implements IAsyncDisposable
@inject IDbContextFactory<PizzaSite.Data.PizzaSiteDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>BlazingPizza</PageTitle>

<h1>Blazing Pizzas</h1>
<br>
<br>
<p>
    <a class="btn btn-primary" href="pizzaspecials/create">Create New</a>
</p>
<br><br>
<!-- Search Bar -->
@* <div class="search-container">
    <input type="text" @bind="searchQuery" @bind:event="oninput" placeholder="Search by name" />
    <button @onclick="OnSearchClicked">Search</button>
</div> *@
<div class="search-container">
    <input type="text" @bind="searchQuery" @bind:event="oninput" placeholder="Search by name" />
</div>
<br>
<br>


<div class="pizza-container">
    <br><br>
    <ul class="pizza-cards">
        @foreach (var special in FilteredSpecials)
        {
            <li style="background-image: url('@special.ImageUrl')">
                <div class="pizza-info">
                    <span class="title">@special.Name</span>
                    @special.Description
                    <span class="price">@special.GetFormattedBasePrice()</span>
                    <div class="actions">
                        <a href="@($"pizzaspecials/edit?id={special.Id}")">Edit</a> |
                        <a href="@($"pizzaspecials/details?id={special.Id}")">Details</a> |
                        <a href="@($"pizzaspecials/delete?id={special.Id}")">Delete</a>
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

@code {
    private PizzaSiteDBContext context = default!;
    List<PizzaSpecial> specials = new();
    private string searchQuery = string.Empty;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        LoadDatabaseSpecials();
    }

    private void LoadDatabaseSpecials()
    {
        specials = context.PizzaSpecial.ToList();
    }

    private IEnumerable<PizzaSpecial> FilteredSpecials =>
        string.IsNullOrWhiteSpace(searchQuery)
        ? specials
        : specials.Where(s => s.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
